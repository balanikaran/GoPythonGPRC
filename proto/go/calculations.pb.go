// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculations.proto

package calculations

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NumAB struct {
	A                    float64  `protobuf:"fixed64,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    float64  `protobuf:"fixed64,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumAB) Reset()         { *m = NumAB{} }
func (m *NumAB) String() string { return proto.CompactTextString(m) }
func (*NumAB) ProtoMessage()    {}
func (*NumAB) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a52029411818266, []int{0}
}

func (m *NumAB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumAB.Unmarshal(m, b)
}
func (m *NumAB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumAB.Marshal(b, m, deterministic)
}
func (m *NumAB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumAB.Merge(m, src)
}
func (m *NumAB) XXX_Size() int {
	return xxx_messageInfo_NumAB.Size(m)
}
func (m *NumAB) XXX_DiscardUnknown() {
	xxx_messageInfo_NumAB.DiscardUnknown(m)
}

var xxx_messageInfo_NumAB proto.InternalMessageInfo

func (m *NumAB) GetA() float64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *NumAB) GetB() float64 {
	if m != nil {
		return m.B
	}
	return 0
}

type ResAB struct {
	Ans                  float64  `protobuf:"fixed64,1,opt,name=ans,proto3" json:"ans,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResAB) Reset()         { *m = ResAB{} }
func (m *ResAB) String() string { return proto.CompactTextString(m) }
func (*ResAB) ProtoMessage()    {}
func (*ResAB) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a52029411818266, []int{1}
}

func (m *ResAB) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResAB.Unmarshal(m, b)
}
func (m *ResAB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResAB.Marshal(b, m, deterministic)
}
func (m *ResAB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResAB.Merge(m, src)
}
func (m *ResAB) XXX_Size() int {
	return xxx_messageInfo_ResAB.Size(m)
}
func (m *ResAB) XXX_DiscardUnknown() {
	xxx_messageInfo_ResAB.DiscardUnknown(m)
}

var xxx_messageInfo_ResAB proto.InternalMessageInfo

func (m *ResAB) GetAns() float64 {
	if m != nil {
		return m.Ans
	}
	return 0
}

func init() {
	proto.RegisterType((*NumAB)(nil), "calculations.NumAB")
	proto.RegisterType((*ResAB)(nil), "calculations.ResAB")
}

func init() {
	proto.RegisterFile("calculations.proto", fileDescriptor_2a52029411818266)
}

var fileDescriptor_2a52029411818266 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x41, 0x16, 0x53, 0x52, 0xe6, 0x62, 0xf5, 0x2b, 0xcd, 0x75, 0x74, 0x12, 0xe2, 0xe1, 0x62, 0x4c,
	0x94, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0c, 0x62, 0x4c, 0x04, 0xf1, 0x92, 0x24, 0x98, 0x20, 0xbc,
	0x24, 0x25, 0x49, 0x2e, 0xd6, 0xa0, 0xd4, 0x62, 0x47, 0x27, 0x21, 0x01, 0x2e, 0xe6, 0xc4, 0xbc,
	0x62, 0xa8, 0x32, 0x10, 0xd3, 0xe8, 0x0e, 0x23, 0x17, 0xa7, 0x33, 0xd4, 0xc0, 0x54, 0x21, 0x7d,
	0x2e, 0xe6, 0xc4, 0x94, 0x14, 0x21, 0x61, 0x3d, 0x14, 0x7b, 0xc1, 0x16, 0x48, 0xa1, 0x09, 0x42,
	0x0c, 0x34, 0xe1, 0xe2, 0x28, 0x2e, 0x4d, 0x2a, 0x29, 0x4a, 0x4c, 0x2e, 0x21, 0x4d, 0x57, 0x6e,
	0x69, 0x4e, 0x49, 0x66, 0x41, 0x4e, 0x25, 0x09, 0xba, 0x8c, 0xb8, 0xd8, 0x52, 0x32, 0xcb, 0x32,
	0x53, 0x52, 0x89, 0xd7, 0x93, 0xc4, 0x06, 0x0e, 0x33, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x92, 0xb3, 0x47, 0x60, 0x49, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalculateClient is the client API for Calculate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalculateClient interface {
	Add(ctx context.Context, in *NumAB, opts ...grpc.CallOption) (*ResAB, error)
	Subtract(ctx context.Context, in *NumAB, opts ...grpc.CallOption) (*ResAB, error)
	Multiply(ctx context.Context, in *NumAB, opts ...grpc.CallOption) (*ResAB, error)
	Divide(ctx context.Context, in *NumAB, opts ...grpc.CallOption) (*ResAB, error)
}

type calculateClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculateClient(cc grpc.ClientConnInterface) CalculateClient {
	return &calculateClient{cc}
}

func (c *calculateClient) Add(ctx context.Context, in *NumAB, opts ...grpc.CallOption) (*ResAB, error) {
	out := new(ResAB)
	err := c.cc.Invoke(ctx, "/calculations.Calculate/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateClient) Subtract(ctx context.Context, in *NumAB, opts ...grpc.CallOption) (*ResAB, error) {
	out := new(ResAB)
	err := c.cc.Invoke(ctx, "/calculations.Calculate/subtract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateClient) Multiply(ctx context.Context, in *NumAB, opts ...grpc.CallOption) (*ResAB, error) {
	out := new(ResAB)
	err := c.cc.Invoke(ctx, "/calculations.Calculate/multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateClient) Divide(ctx context.Context, in *NumAB, opts ...grpc.CallOption) (*ResAB, error) {
	out := new(ResAB)
	err := c.cc.Invoke(ctx, "/calculations.Calculate/divide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculateServer is the server API for Calculate service.
type CalculateServer interface {
	Add(context.Context, *NumAB) (*ResAB, error)
	Subtract(context.Context, *NumAB) (*ResAB, error)
	Multiply(context.Context, *NumAB) (*ResAB, error)
	Divide(context.Context, *NumAB) (*ResAB, error)
}

// UnimplementedCalculateServer can be embedded to have forward compatible implementations.
type UnimplementedCalculateServer struct {
}

func (*UnimplementedCalculateServer) Add(ctx context.Context, req *NumAB) (*ResAB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedCalculateServer) Subtract(ctx context.Context, req *NumAB) (*ResAB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtract not implemented")
}
func (*UnimplementedCalculateServer) Multiply(ctx context.Context, req *NumAB) (*ResAB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (*UnimplementedCalculateServer) Divide(ctx context.Context, req *NumAB) (*ResAB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}

func RegisterCalculateServer(s *grpc.Server, srv CalculateServer) {
	s.RegisterService(&_Calculate_serviceDesc, srv)
}

func _Calculate_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumAB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculations.Calculate/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServer).Add(ctx, req.(*NumAB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculate_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumAB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculations.Calculate/Subtract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServer).Subtract(ctx, req.(*NumAB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculate_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumAB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculations.Calculate/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServer).Multiply(ctx, req.(*NumAB))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculate_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumAB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculations.Calculate/Divide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServer).Divide(ctx, req.(*NumAB))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calculate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calculations.Calculate",
	HandlerType: (*CalculateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _Calculate_Add_Handler,
		},
		{
			MethodName: "subtract",
			Handler:    _Calculate_Subtract_Handler,
		},
		{
			MethodName: "multiply",
			Handler:    _Calculate_Multiply_Handler,
		},
		{
			MethodName: "divide",
			Handler:    _Calculate_Divide_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculations.proto",
}
